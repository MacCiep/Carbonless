c
c!
c
c!
c
cc
user
c
authenticated_headers({},nil)
headers
c
current_user
c
current_user
c!
c
current_user
c
c!
c
request
headers
current_user
c
c!
c
login_as(user, scope: :users)
c!
c
user
c
subject
c
n
@prize
c
UsersPrize.find(params[:id])
params[:id]
c
subject
c
c!
c
subject
users_prize_path(user_prize)
user_prize
c
Location.with_nearby_machines(70.0, 70.0)
Location.all
Location.with_nearby_machines(79.0, 79.0)
c
warden.set_user(resource, options.merge!(scope: scope))
n
s
c
n
nn
n
nn
n
nn
n
c
n
c
n
warden.authenticate!(scope: :user, run_callbacks: false)
c
session
sessions
warden.authenticate!(auth_options)
auth_options
session
warden.authenticate!(:jwt, scope: :user, run_callbacks: false)
c
user
c
user
c
user
c
n
c
(@record.created_at + @record.duration.days).in_time_zone("UTC")
@record.duration.days
@record.duration
DateTime.now.in_time_zone("UTC")
(@record.created_at + @record.duration).in_time_zone("UTC")
duration_left?
duration_left?\
@record.active?
c
s
@prize
c
params
configure_account_update_params
c
@user.purchases.last.created_at + TIME_BETWEEN_PURCHASES < verification_time
verification_time
 @user.purchases.last.created_at + TIME_BETWEEN_PURCHASES
TIME_BETWEEN_PURCHASES
@user.purchases.count.zero?
c
n
c
user.purchases
c
e
n
user.purchases.count.zero?
user.purchases.count
user.purchases.count.
@user.purchases
@user
user
useer
c
user.purchases
user.count
c
user.purchases.count
user.purchases
user
@user.purchases.count.zero?
c
s
c
n
@user.purchases.count.zero?
s
validate_purchase_offset
c
validate_purchase_offset
c
validate_purchase_offset
validate_expiration_date
c
EXPIRATION_TIME_LIMIT
verification_time
decrypted_expires.to_datetime.in_time_zone("UTC")
c
validate_expiration_date
validate_purchase_offset
c
Machine.all
machine
n
s
c
expected_response
response.body
c
response.body
response
c
test
c
PurchaseSerializer.new(purchase, user).call
c
result.success?
result.value
c
PurchaseSerializer.new(result.value, current_user).call
PurchaseSerializer.new(purchase, user).call
result.value
result.success?
c
purchase.save
n
user.purchases.build(machine: machine, purchase_type: machine.service_type_before_type_cast, points: points)
c
n
c
Validator.new(machine, expires, user).call
c
n
user
machine
machine,
expires
c
JSON.parse(response.body)
response.body
c
response.body
response
c
success_status(result.value)
c
result.value
c
n
c
n
c
user.travel_sessions.build(@travel_session_origin_params, machine: machine, purchase_type: machine.service_type_before_type_cast)
@travel_session_origin_params
c
    def call
c
OriginValidator.new(machine_params).call
machine
machine_params
c
exception
n
user.travel_sessions.active.present?
c
user.travel_sessions.active.present?
c
exception
n
s
n
machine.service_type == :travel
machine.service_type == 'travel'
machine.service_type
n
machine.nil?
n
s
handler_params
c
super
c
subject.save
c
machine.service_type_before_type_cast
machine.service_type
machine.service_type.to_i
machine.service_type
machine
c
expires_date
verification_time + EXPIRATION_TIME_LIMIT
verification_time
verification_time < expires_date
c
n
c
n
expires_date
verification_time
verification_time < expires_date
decrypted_expires.to_datetime.in_time_zone("UTC")
c
verification_time
decrypted_expires.to_datetime
c
n
c
n
expires_date = decrypted_expires.to_datetime
decrypted_expires = encryptor.decrypt_and_verify(expires)
encryptor.decrypt_and_verify(expires)
