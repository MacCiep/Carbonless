c
current_user.total_carbon_saved.round(2)
c
{ carbon_saved: current_user.total_carbon_saved.round(2), points: current_user.points }
c
{ carbon_saved: session[:carbon_saved], points: session[:points] }.to_json
{ carbon_saved: session[:carbon_saved], points: session[:points] }.json
response.body
c
@car_distance.present?
c
n
travel_session.reload.end_latitude
c
travel_session.reload
c
n
TravelSessions::TravelSessionCalculator.new(@car_distance).call
session_update_attributes
n
@car_distance
@car_distance.present?
c
DistanceMatrix::Requests::CalculateDistance.new(current_user, @travel_session).call
c
exception
n
DistanceMatrix::Requests::CalculateDistance.new(current_user, @travel_session).call
c
n
c
TravelSessions::Verificator.new(travel_session_params).call
c
DateTime.now
verification_time + 20.minutes
verification_time
expires_date
c
n
s
TravelSessions::Verificator.new(travel_session_params).call
c
current_session.machine.uuid == uuid
c
current_session.machine.uuid == uuid
puts 'true' if verification_time > current_session.created_at + SESSION_MAX_LIFETIME
verification_time > current_session.created_at + SESSION_MAX_LIFETIME
c
n
current_session.machine.uuid
uuid
verification_time > current_session.created_at + SESSION_MAX_LIFETIME
current_session.created_at + SESSION_MAX_LIFETIME
verification_time
c
current_session.created_at + SESSION_MAX_LIFETIME
verification_time
c
DateTime.now
current_session.created_at + SESSION_MAX_LIFETIME
current_session.created_at
verification_time
c
ActiveSupport::MessageEncryptor.new(machine.secret).encrypt_and_sign(DateTime.now + 10.minutes)
continue
machine.secret.length
machine.secret.lenght
'362bfb95773afcfd1e6c82fcce9e4a12'.length
'362bfb95773afcfd1e6c82fcce9e4a12'.lenght
ActiveSupport::MessageEncryptor.new('362bfb95773afcfd1e6c82fcce9e4a12').encrypt_and_sign('test')
machine.secret
ActiveSupport::MessageEncryptor.new(machine.secret).encrypt_and_sign('test')
ActiveSupport::MessageEncryptor.new(machine.secret).encrypt_and_sign((DateTime.now + 10.minutes).to_s)
(DateTime.now + 10.minutes).to_s
ActiveSupport::MessageEncryptor.new(machine.secret).encrypt_and_sign((DateTime.now + 10.minutes).to_s)
ActiveSupport::MessageEncryptor.new(machine.secret).encrypt_and_sign(DateTime.now + 10.minutes)
ActiveSupport::MessageEncryptor.new(machine.secret)..encrypt_and_sign
ActiveSupport::MessageEncryptor.new(machine.secret)
c
subject
c
n
c
expect { subject }.to change { user.points }.by(10)
user.reload.total_carbon_saved
c
response_body
c
build_query_params(travel_session)
response_body
c
DistanceMatrix::Requests::CalculateDistance.new(current_user, @travel_session).call
c
n
c
n
TravelSessions::Verificator.new(travel_session_params, @travel_session).call
c
n
c
travel_session_position_params.to_hash
travel_session_position_params
c
n
response_body.dig('rows')&.first&.dig('elements')&.first&.dig('distance', 'value')
c
response_body.dig('rows')
response_body.dig('rows'
response_body.dig('rows)
response_body.dig(:row)
response_body
response_body.dig('row')
response_body.dig('row')&
response_body.dig('row')&.first
response_body.dig('row')&.first&.dig('elements')&.first&.dig('distance', 'value')
response_body
c
build_query_params(travel_session)
response_body
c
response_body
c
response_body
c
response_body
continue
car_distance
c
n
c
n
m
c
n
continue
@travel_session.assign_attributes(travel_session_end_position_params, active: false)c
@travel_session.assign_attributes(travel_session_end_position_params, active: false)
c
e
n
exception
n
cn
n
decrypted_expires
encryptor.decrypt_and_verify(expires)
n
c
n
verification_time > current_session.created_at + SESSION_MAX_LIFETIME
c
SESSION_MAX_LIFETIME + Datetime.now
SESSION_MAX_LIFETIME + Time.now
SESSION_MAX_LIFETIME + Date.now
SESSION_MAX_LIFETIME
current_session.created_at
current_session.created_a
SESSION_MAX_LIFETIME + current_session.created_at
c
SESSION_MAX_LIFETIME + current_session.created_at
c
current_session.created_at + 90.minutes
current_session.created_at + 1.hours
current_session.created_at
SESSION_MAX_LIFETIME
SESSION_MAX_LIFETIME + current_session.created_at
c
TravelSessions::Verificator.new(travel_session_params, @travel_session).call
c
TravelSessions::Verificator.new(travel_session_params, @travel_session)
n
s
c
travel_session_params
c
n
encryptor.decrypt_and_verify(expires)
expires
c
n
c
n
an
c
n
c
n
c
n
c
n
Machine.find_by(uuid: travel_session_params[:uuid]).id
Machine.find_by(uuid: travel_session_params[:uuid])
c
n
c
Machine.find_by(uuid: uuid).id
c
n
c
n
c
n
c
n
c
machine_params[:expires]
c
travel_session_params
c
cc
c
machine_params[:expires]
machine_params
machine_paramsmachine_paramsmachine_paramsmachine_params
c
n
s
c
@expires
expires
n
s
verify_current_session
c
n
c
n
current_user.travel_sessions.active.present?
c
end_datetime + END_TIME_OFFSET
travel_session.updated_at
c
travel_session.updated_at
end_datetime + END_TIME_OFFSET < travel_session.updated_at
start_datetime > travel_session.created_at + START_TIME_OFFSET
travel_session.created_at + START_TIME_OFFSET
start_datetime
travel_session.updated_at
end_datetime
start_datetime
travel_session.created_at + START_TIME_OFFSET
start_datetime
travel_session.created_at
c
[@start_date, @start_time].join(' ').to_datetime - 2.hours
[@start_date, @start_time].join(' ').to_datetime - TIMEZONE_DIFFERENCE
@start_time
[@start_date, @start_time].join(' ').to_datetime
travel_session.created_at + START_TIME_OFFSET
(travel_session.created_at + START_TIME_OFFSET).to_datetime
_
-
_
travel_session.created_at + START_TIME_OFFSET
travel_session.created_at
